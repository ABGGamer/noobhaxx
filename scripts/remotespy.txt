local detected = false
--if you get kicked by server, change detected to true

local printtoconsole

if not detected then
    printtoconsole = warn
else
    local path = "C:\\remotespy\\remotespyOutput.txt" --you can change it
    --if you don't change the path make a folder C:\\remotespy
    printtoconsole = function(text) writefile(path, text, true) end
end

--[[
	RemoteSpy by Autumn

	This is the original script, reworked for Seraph
	Feel free to edit and redistribute it as you desire
	If you do though, please leave this header intact!

	Latest update: Seraph 1.15.0
]]

local enabled = {
    -- Set any of these objects to false to stop logging them
    BindableEvent = true;
    BindableFunction = true;
    RemoteEvent = true;
    RemoteFunction = true;
}

local ignore = {
    -- Any remotes matching the names listed below will be ignored
	Event = true;
}

--[[

	[!] Workaround for potential __namecall bypass [!]
	
	RemoteSpy only hooks the __namecall metamethod (for ':' method calls) by default
	Setting the value below to 'true' will enable additional hooking on __index
	Doing this will catch sneaky calls in which the '.' operator is delibrately used to avoid the __namecall hook
	This setting causes extremely heavy memory and CPU usage, therefore extreme caution is advised
	
]]

local enable_additional_hooking = false

----------------------------------------------------------------------------------------------------------------------------------------------

if _G.RemoteSpyLock then printtoconsole("!!! RemoteSpy is already running!") error() end _G.RemoteSpyLock = true

local meta = getrawmetatable(game)

local oldmeta = {
	__index = meta.__index;
	__namecall = meta.__namecall;
}

local function formatargs(args,showkeys)
    if #args == 0 then return "N/A" end
    local strargs = {}
    for k,v in next,args do
        local argstr = ""
        if type(v) == "string" then
            argstr = "\"" .. v .. "\""
        elseif type(v) == "table" then
            argstr = "{" .. formatargs(v,true) .. "}"
        else
            argstr = tostring(v)
        end
        if showkeys and type(k) ~= "number" then
            table.insert(strargs,k.."="..argstr)
        else
            table.insert(strargs,argstr)
        end
    end
    return table.concat(strargs, ", ")
end

local realmethods = {
	Fire = Instance.new("BindableEvent").Fire;
	Invoke = Instance.new("BindableFunction").Invoke;
	FireServer = Instance.new("RemoteEvent").FireServer;
	InvokeServer = Instance.new("RemoteFunction").InvokeServer;
}

local hook = function(method)
	return function(...)
		local args = {...}
		local t,k = args[1],args[#args]
		if (k == "Fire" or k == "Invoke" or k == "FireServer" or k == "InvokeServer") and (enabled[t.ClassName] and not ignore[t.Name]) then
			local fake = function(self,...)
				local args = {...}
				local ret = {realmethods[k](self,...)}
				printtoconsole("RemoteSpy event:\n----------------------------------------\n[*] "..t.ClassName.." called!\n[*] Path: "..t:GetFullName().."\n[*] Args: "..formatargs(args).."\n[*] Return: "..formatargs(ret).."\n----------------------------------------")
				return unpack(ret)
			end
			table.remove(args,#args) -- the key is the only irrelevant argument for __namecall
			return method == "__namecall" and fake(unpack(args)) or fake
		else
			return oldmeta[method](...)
		end
	end
end

meta.__namecall = hook("__namecall")

if enable_additional_hooking then
	meta.__index = hook("__index")
end
